{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/brostromb/ai-ml-principles-exercises/blob/main/version%201_wb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a762d7ae",
      "metadata": {
        "id": "a762d7ae"
      },
      "source": [
        "## Install dependencies and import packages\n",
        "First we need to install the libraries we will be using. We will use `numpy` for generic matrix operations and `tensorflow` for deep learning operations such as convolutions, pooling and training (backpropagation)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "a038785e",
      "metadata": {
        "id": "a038785e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "93e3a565-5614-496c-cb48-ac6e30611dce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (1.21.6)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.8/dist-packages (2.9.2)\n",
            "Collecting wandb\n",
            "  Downloading wandb-0.13.5-py2.py3-none-any.whl (1.9 MB)\n",
            "\u001b[K     |████████████████████████████████| 1.9 MB 6.5 MB/s \n",
            "\u001b[?25hRequirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (14.0.6)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.15.0)\n",
            "Requirement already satisfied: flatbuffers<2,>=1.12 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.12)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (3.1.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.8/dist-packages (from tensorflow) (21.3)\n",
            "Requirement already satisfied: keras<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (2.9.0)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.14.1)\n",
            "Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.1.2)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (2.1.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (0.28.0)\n",
            "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (0.4.0)\n",
            "Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (3.19.6)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.8/dist-packages (from tensorflow) (57.4.0)\n",
            "Requirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (2.9.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (4.1.1)\n",
            "Requirement already satisfied: tensorboard<2.10,>=2.9 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (2.9.1)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.3.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.50.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.8/dist-packages (from astunparse>=1.6.0->tensorflow) (0.38.4)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.6.1)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.23.0)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.0.1)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (3.4.1)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.8.1)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.4.6)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.14.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.2.8)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (4.9)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (5.2.0)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.8/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (1.3.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.8/dist-packages (from markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (4.13.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.8/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (3.10.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.8/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.4.8)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (3.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2022.9.24)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2.10)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (1.24.3)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.8/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (3.2.2)\n",
            "Collecting pathtools\n",
            "  Downloading pathtools-0.1.2.tar.gz (11 kB)\n",
            "Collecting setproctitle\n",
            "  Downloading setproctitle-1.3.2-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (31 kB)\n",
            "Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.8/dist-packages (from wandb) (5.4.8)\n",
            "Collecting GitPython>=1.0.0\n",
            "  Downloading GitPython-3.1.29-py3-none-any.whl (182 kB)\n",
            "\u001b[K     |████████████████████████████████| 182 kB 43.4 MB/s \n",
            "\u001b[?25hCollecting docker-pycreds>=0.4.0\n",
            "  Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.8/dist-packages (from wandb) (6.0)\n",
            "Collecting sentry-sdk>=1.0.0\n",
            "  Downloading sentry_sdk-1.11.1-py2.py3-none-any.whl (168 kB)\n",
            "\u001b[K     |████████████████████████████████| 168 kB 29.4 MB/s \n",
            "\u001b[?25hCollecting shortuuid>=0.5.0\n",
            "  Downloading shortuuid-1.0.11-py3-none-any.whl (10 kB)\n",
            "Requirement already satisfied: Click!=8.0.0,>=7.0 in /usr/local/lib/python3.8/dist-packages (from wandb) (7.1.2)\n",
            "Requirement already satisfied: promise<3,>=2.0 in /usr/local/lib/python3.8/dist-packages (from wandb) (2.3)\n",
            "Collecting gitdb<5,>=4.0.1\n",
            "  Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n",
            "\u001b[K     |████████████████████████████████| 62 kB 648 kB/s \n",
            "\u001b[?25hCollecting smmap<6,>=3.0.1\n",
            "  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n",
            "Collecting sentry-sdk>=1.0.0\n",
            "  Downloading sentry_sdk-1.11.0-py2.py3-none-any.whl (168 kB)\n",
            "\u001b[K     |████████████████████████████████| 168 kB 37.7 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.10.1-py2.py3-none-any.whl (166 kB)\n",
            "\u001b[K     |████████████████████████████████| 166 kB 43.8 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.10.0-py2.py3-none-any.whl (166 kB)\n",
            "\u001b[K     |████████████████████████████████| 166 kB 38.8 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.10-py2.py3-none-any.whl (162 kB)\n",
            "\u001b[K     |████████████████████████████████| 162 kB 36.6 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.9-py2.py3-none-any.whl (162 kB)\n",
            "\u001b[K     |████████████████████████████████| 162 kB 46.9 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.8-py2.py3-none-any.whl (158 kB)\n",
            "\u001b[K     |████████████████████████████████| 158 kB 59.9 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.7-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 47.5 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.6-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 55.8 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.5-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 35.4 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.4-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 39.8 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.3-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 27.0 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.2-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 30.9 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.1-py2.py3-none-any.whl (157 kB)\n",
            "\u001b[K     |████████████████████████████████| 157 kB 8.7 MB/s \n",
            "\u001b[?25h  Downloading sentry_sdk-1.9.0-py2.py3-none-any.whl (156 kB)\n",
            "\u001b[K     |████████████████████████████████| 156 kB 17.7 MB/s \n",
            "\u001b[?25hRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.8/dist-packages (from packaging->tensorflow) (3.0.9)\n",
            "Building wheels for collected packages: pathtools\n",
            "  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pathtools: filename=pathtools-0.1.2-py3-none-any.whl size=8806 sha256=f9b60cf20f23c09b5ab8c5ba6fb762c10b15d89938af9ed2470ed6c3a6762464\n",
            "  Stored in directory: /root/.cache/pip/wheels/4c/8e/7e/72fbc243e1aeecae64a96875432e70d4e92f3d2d18123be004\n",
            "Successfully built pathtools\n",
            "Installing collected packages: smmap, gitdb, shortuuid, setproctitle, sentry-sdk, pathtools, GitPython, docker-pycreds, wandb\n",
            "Successfully installed GitPython-3.1.29 docker-pycreds-0.4.0 gitdb-4.0.10 pathtools-0.1.2 sentry-sdk-1.9.0 setproctitle-1.3.2 shortuuid-1.0.11 smmap-5.0.0 wandb-0.13.5\n"
          ]
        }
      ],
      "source": [
        "import sys\n",
        "!{sys.executable} -m pip install numpy tensorflow wandb\n",
        "\n",
        "import wandb\n",
        "import numpy as np\n",
        "from tensorflow import keras\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "\n",
        "date_and_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
        "\n",
        "wandb_run = wandb.init(\n",
        "    project=\"ai-ml-exercise\",\n",
        "    name=f\"preprocessing {date_and_time}\"\n",
        ")"
      ],
      "metadata": {
        "id": "14dPZ0SvIeG1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        },
        "outputId": "620a492c-9951-4907-8ca3-a790ed1c0e80"
      },
      "id": "14dPZ0SvIeG1",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR:wandb.jupyter:Failed to detect the name of this notebook, you can set it manually with the WANDB_NOTEBOOK_NAME environment variable to enable code saving.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "        window._wandbApiKey = new Promise((resolve, reject) => {\n",
              "            function loadScript(url) {\n",
              "            return new Promise(function(resolve, reject) {\n",
              "                let newScript = document.createElement(\"script\");\n",
              "                newScript.onerror = reject;\n",
              "                newScript.onload = resolve;\n",
              "                document.body.appendChild(newScript);\n",
              "                newScript.src = url;\n",
              "            });\n",
              "            }\n",
              "            loadScript(\"https://cdn.jsdelivr.net/npm/postmate/build/postmate.min.js\").then(() => {\n",
              "            const iframe = document.createElement('iframe')\n",
              "            iframe.style.cssText = \"width:0;height:0;border:none\"\n",
              "            document.body.appendChild(iframe)\n",
              "            const handshake = new Postmate({\n",
              "                container: iframe,\n",
              "                url: 'https://wandb.ai/authorize'\n",
              "            });\n",
              "            const timeout = setTimeout(() => reject(\"Couldn't auto authenticate\"), 5000)\n",
              "            handshake.then(function(child) {\n",
              "                child.on('authorize', data => {\n",
              "                    clearTimeout(timeout)\n",
              "                    resolve(data)\n",
              "                });\n",
              "            });\n",
              "            })\n",
              "        });\n",
              "    "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Tracking run with wandb version 0.13.5"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Run data is saved locally in <code>/content/wandb/run-20221206_140440-23l9aa2p</code>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "Syncing run <strong><a href=\"https://wandb.ai/bjorn-brostrom/ai-ml-exercise/runs/23l9aa2p\" target=\"_blank\">preprocessing 2022-12-06 14:04:33</a></strong> to <a href=\"https://wandb.ai/bjorn-brostrom/ai-ml-exercise\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "084f8685",
      "metadata": {
        "id": "084f8685"
      },
      "source": [
        "## Download the data\n",
        "We use a digit classification dataset called *MNIST*. This code downloads and loads the images together with their true labels."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "48724cbc",
      "metadata": {
        "id": "48724cbc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f70b875e-d940-47f4-f782-b3b073f18a48"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ],
      "source": [
        "(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Define helper functions for logging histograms to WandB\n",
        "Weights and Biases has built in functions to generate histograms of data. These functions do however upload every sample to the WandB server before creating the histogram. This is useful to create interactive graphs, but if logging data from many samples it is too slow to upload every single sample. Instead we can create a histogram with `numpy` and only upload the bucket edges and the counts. We then create a bar plot in WandB to visualize the count for each bucket."
      ],
      "metadata": {
        "id": "3jhfLSh1Mt2u"
      },
      "id": "3jhfLSh1Mt2u"
    },
    {
      "cell_type": "code",
      "source": [
        "def log_bar(x, y, title, x_name=\"x\", y_name=\"y\", keep_order=False):\n",
        "    if keep_order:\n",
        "        x = [f\"{idx}: {x_}\" for idx, x_ in enumerate(x)] # Make sure alphabetical sorting works\n",
        "    table = wandb.Table(\n",
        "        data=[[x, y] for x, y in zip(x, y)],\n",
        "        columns=[x_name, y_name]\n",
        "    )\n",
        "    wandb.log({title: wandb.plot.bar(table, x_name, y_name, title=title)})\n",
        "\n",
        "\n",
        "def create_histogram(data, min_value=None, max_value=None, bins=10):\n",
        "    if min_value is None:\n",
        "        min_value = data.min()\n",
        "    if max_value is None:\n",
        "        max_value = data.max()\n",
        "\n",
        "    if isinstance(bins, int):\n",
        "        bin_edges = np.linspace(min_value, max_value, num=bins)\n",
        "    else:\n",
        "        bin_edges = bins\n",
        "        \n",
        "    numbers, _ = np.histogram(data, bins=bin_edges)\n",
        "    bin_names = [f\"{lower:.1f}-{upper:.1f}\" for lower, upper in zip(bin_edges[:-1], bin_edges[1:])]\n",
        "\n",
        "    return bin_names, numbers"
      ],
      "metadata": {
        "id": "cvBkQQ2Ejc1e"
      },
      "id": "cvBkQQ2Ejc1e",
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualize the labels\n",
        "Except from knowing what the training images looks like it is interesting to know how many images of each label type we have. This is important since if we are lacking data from some label, we will not be able to train a network to recognize images with that label."
      ],
      "metadata": {
        "id": "FjVrbT9asqMp"
      },
      "id": "FjVrbT9asqMp"
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "\n",
        "num_images_per_label = Counter(y_train)\n",
        "x, num_images = zip(*((str(x_), num_) for x_, num_ in sorted(num_images_per_label.items())))\n",
        "log_bar(x, num_images, \"Labels in training data\", x_name=\"Label\", y_name=\"# images\")\n",
        "\n",
        "num_images_per_label = Counter(y_test)\n",
        "x, num_images = zip(*((str(x_), num_) for x_, num_ in sorted(num_images_per_label.items())))\n",
        "log_bar(x, num_images, \"Labels in test data\", x_name=\"Label\", y_name=\"# images\")"
      ],
      "metadata": {
        "id": "TZpNrm94rcU2"
      },
      "id": "TZpNrm94rcU2",
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualize the training data\n",
        "To get a feeling for what the data looks like we will plot one of the training images and its corresponding label. We will also plot a histogram over all the values in all the images so that we can see how the intensity in the images is distributed."
      ],
      "metadata": {
        "id": "Cz_W0GwYRIAF"
      },
      "id": "Cz_W0GwYRIAF"
    },
    {
      "cell_type": "code",
      "source": [
        "i = 0\n",
        "print(f\"Sample {i} is number {y_train[i]}\")\n",
        "plt.imshow(x_train[0])\n",
        "\n",
        "image = wandb.Image(x_train[0], caption=f\"Training sample {i} is a {y_train[i]}\")\n",
        "wandb.log({\"Example training image\": image})"
      ],
      "metadata": {
        "id": "cIFy0YWLO-a9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "ca3ba51f-83de-47bc-a3ce-298fd0ad8353"
      },
      "id": "cIFy0YWLO-a9",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample 0 is number 5\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Log the datasets minimum and maximum intensities and datatype to the WandB summary\n",
        "min_value = min(x_train.min(), x_test.min())\n",
        "max_value = max(x_train.max(), x_test.max())\n",
        "wandb_run.summary[\"raw\"] = {\"min\": min_value, \"max\": max_value, \"dtype\": str(x_train.dtype)}\n",
        "\n",
        "# Create a new histogram of the image pixels intensities\n",
        "bin_names, train_hist = create_histogram(x_train)\n",
        "log_bar(bin_names, train_hist, \"Raw training data\", x_name=\"bin\", y_name=\"# pixels\", keep_order=True)"
      ],
      "metadata": {
        "id": "fLZX76QOIcTG"
      },
      "id": "fLZX76QOIcTG",
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a heatmap over all active pixels from all frames\n",
        "heatmap = np.mean(x_train, axis=0)\n",
        "plt.imshow(heatmap)\n",
        "wandb.log({\"Heatmap of training images\": wandb.Image(np.expand_dims(heatmap, axis=2), caption=\"The mean of all images in the training set\")})\n",
        "\n",
        "# Log a histogram of the average value for each pixel through out the\n",
        "# training dataset. This shows us how many of the pixels that are\n",
        "# always zero in all frames.\n",
        "bin_names, heatmap_hist = create_histogram(heatmap.flatten(), bins=[0, 1, 10, 30, 100, 255])\n",
        "log_bar(bin_names, heatmap_hist, \"Average value per pixel in training data\", x_name=\"bin\", y_name=\"# pixels\", keep_order=True)"
      ],
      "metadata": {
        "id": "v4EKkknJmZ8n",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "4260189b-11db-4233-c3a0-05fb930c9b02"
      },
      "id": "v4EKkknJmZ8n",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Preprocess the data\n",
        "Now that we understand the data we are ready to preprocess the images to make them suitable for training of a deep learning model."
      ],
      "metadata": {
        "id": "P_5M0D6eSY-S"
      },
      "id": "P_5M0D6eSY-S"
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalize the values to the range -1...1\n",
        "x_train_norm = x_train / 128 - 1\n",
        "x_test_norm = x_test / 128 - 1"
      ],
      "metadata": {
        "id": "ekWqPTStOdM2"
      },
      "id": "ekWqPTStOdM2",
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a new histogram of the modified values\n",
        "min_value = min(x_train_norm.min(), x_test_norm.min())\n",
        "max_value = max(x_train_norm.max(), x_test_norm.max())\n",
        "wandb_run.summary[\"preprocessed\"] = {\"min\": min_value, \"max\": max_value, \"dtype\": str(x_train_norm.dtype)}\n",
        "\n",
        "bin_names, train_hist = create_histogram(x_train_norm)\n",
        "log_bar(bin_names, train_hist, \"Preprocessed training data\", x_name=\"bin\", y_name=\"# pixels\", keep_order=True)"
      ],
      "metadata": {
        "id": "FzDuNQreS8H_"
      },
      "id": "FzDuNQreS8H_",
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "i = 0\n",
        "print(f\"Sample {i} is number {y_train[i]}\")\n",
        "plt.imshow(x_train_norm[0])\n",
        "\n",
        "image = wandb.Image(x_train_norm[0], caption=f\"Training sample {i} is a {y_train[i]}\")\n",
        "wandb.log({\"Example training image (preprocessed)\": image})"
      ],
      "metadata": {
        "id": "vkjgqam-Ve9e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "042ab6f6-95f1-4930-8244-8256ef88b883"
      },
      "id": "vkjgqam-Ve9e",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sample 0 is number 5\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Subsample the test data set\n",
        "If the test data set has different number of samples from different labels we will need to weight the different classes differently when evaluating our model if we want each number to be treated as equally importatant. Another option is to subsample so that the test data set has the same number of each label and ignoring the other images."
      ],
      "metadata": {
        "id": "T7_tZ64Jv-pw"
      },
      "id": "T7_tZ64Jv-pw"
    },
    {
      "cell_type": "code",
      "source": [
        "num_images_per_label = Counter(y_test)\n",
        "min_number_of_labels = min(num_images_per_label.values())\n",
        "\n",
        "indexes_to_keep = []\n",
        "for label in num_images_per_label.keys():\n",
        "  indexes_to_keep.extend(\n",
        "      np.random.choice(\n",
        "          np.where(y_test == label)[0],\n",
        "          size=min_number_of_labels,\n",
        "          replace=False\n",
        "      ).tolist()\n",
        "  )\n",
        "\n",
        "np.random.shuffle(indexes_to_keep)\n",
        "x_test_norm_subsamp = x_test_norm[indexes_to_keep]\n",
        "y_test_subsamp = y_test[indexes_to_keep]"
      ],
      "metadata": {
        "id": "UQeTmDj2YfTF"
      },
      "id": "UQeTmDj2YfTF",
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_test_norm_subsamp.shape"
      ],
      "metadata": {
        "id": "WiDAbwj6zN44",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "10c3e493-68dd-4b10-8cd0-06d499d7e1f6"
      },
      "id": "WiDAbwj6zN44",
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8920, 28, 28)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Verify that the labels and images are still in sync\n",
        "print(f\"This should be a {y_test_subsamp[0]}\")\n",
        "plt.imshow(x_test_norm_subsamp[0])"
      ],
      "metadata": {
        "id": "Lnfbicbsxuk1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "3ff4659c-63fe-4b42-c29a-dcdbef1d1a80"
      },
      "id": "Lnfbicbsxuk1",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This should be a 6\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7fa74f118040>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Log the new distribution\n",
        "num_images_per_label = Counter(y_test_subsamp)\n",
        "labels_, num_images = zip(*((str(label), number) for label, number in sorted(num_images_per_label.items())))\n",
        "log_bar(labels_, num_images, \"Labels in test data (subsampled)\", x_name=\"Label\", y_name=\"# images\")"
      ],
      "metadata": {
        "id": "8D9xkzDmxGqM"
      },
      "id": "8D9xkzDmxGqM",
      "execution_count": 15,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}